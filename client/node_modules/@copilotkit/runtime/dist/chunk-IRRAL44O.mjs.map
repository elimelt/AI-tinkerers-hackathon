{"version":3,"sources":["../package.json","../src/lib/integrations/node-http/index.ts","../src/lib/integrations/shared.ts","../src/graphql/resolvers/copilot.resolver.ts","../src/graphql/inputs/generate-copilot-response.input.ts","../src/graphql/inputs/message.input.ts","../src/graphql/types/enums.ts","../src/graphql/inputs/frontend.input.ts","../src/graphql/inputs/action.input.ts","../src/graphql/inputs/cloud.input.ts","../src/graphql/inputs/cloud-guardrails.input.ts","../src/graphql/inputs/forwarded-parameters.input.ts","../src/graphql/inputs/agent-session.input.ts","../src/graphql/inputs/agent-state.input.ts","../src/graphql/types/copilot-response.type.ts","../src/graphql/types/message-status.type.ts","../src/service-adapters/events.ts","../src/lib/telemetry-client.ts","../src/agents/langgraph/event-source.ts","../src/agents/langgraph/events.ts","../src/lib/runtime/remote-actions.ts","../src/lib/logger.ts"],"sourcesContent":["{\n  \"name\": \"@copilotkit/runtime\",\n  \"private\": false,\n  \"homepage\": \"https://github.com/CopilotKit/CopilotKit\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/CopilotKit/CopilotKit.git\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"version\": \"1.3.0\",\n  \"sideEffects\": false,\n  \"main\": \"./dist/index.js\",\n  \"module\": \"./dist/index.mjs\",\n  \"exports\": {\n    \".\": \"./dist/index.js\"\n  },\n  \"types\": \"./dist/index.d.ts\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"tsup --onSuccess \\\"pnpm run generate-graphql-schema\\\"\",\n    \"dev\": \"tsup --watch --onSuccess \\\"pnpm run generate-graphql-schema\\\"\",\n    \"test\": \"jest --passWithNoTests\",\n    \"check-types\": \"tsc --noEmit\",\n    \"clean\": \"rm -rf .turbo && rm -rf node_modules && rm -rf dist && rm -rf .next && rm -rf __snapshots__\",\n    \"generate-graphql-schema\": \"rm -rf __snapshots__ && ts-node ./scripts/generate-gql-schema.ts\"\n  },\n  \"devDependencies\": {\n    \"@swc/core\": \"1.5.28\",\n    \"@types/express\": \"^4.17.21\",\n    \"@types/jest\": \"^29.5.4\",\n    \"@types/node\": \"^18.11.17\",\n    \"@whatwg-node/server\": \"^0.9.34\",\n    \"eslint\": \"^8.56.0\",\n    \"eslint-config-custom\": \"workspace:*\",\n    \"jest\": \"^29.6.4\",\n    \"nodemon\": \"^3.1.3\",\n    \"ts-jest\": \"^29.1.1\",\n    \"ts-node\": \"^10.9.2\",\n    \"tsconfig\": \"workspace:*\",\n    \"tsup\": \"^6.7.0\",\n    \"typescript\": \"^5.2.3\"\n  },\n  \"dependencies\": {\n    \"@anthropic-ai/sdk\": \"^0.27.3\",\n    \"@copilotkit/shared\": \"workspace:*\",\n    \"@google/generative-ai\": \"^0.11.2\",\n    \"@graphql-yoga/plugin-defer-stream\": \"^3.3.1\",\n    \"@langchain/community\": \"^0.0.53\",\n    \"@langchain/core\": \"^0.1.61\",\n    \"@langchain/openai\": \"^0.0.28\",\n    \"class-transformer\": \"^0.5.1\",\n    \"express\": \"^4.19.2\",\n    \"graphql\": \"^16.8.1\",\n    \"graphql-scalars\": \"^1.23.0\",\n    \"graphql-yoga\": \"^5.3.1\",\n    \"groq-sdk\": \"^0.5.0\",\n    \"langchain\": \"^0.1.36\",\n    \"openai\": \"^4.50.0\",\n    \"pino\": \"^9.2.0\",\n    \"pino-pretty\": \"^11.2.1\",\n    \"reflect-metadata\": \"^0.2.2\",\n    \"rxjs\": \"^7.8.1\",\n    \"type-graphql\": \"2.0.0-rc.1\",\n    \"zod\": \"^3.23.3\"\n  },\n  \"keywords\": [\n    \"copilotkit\",\n    \"copilot\",\n    \"react\",\n    \"nextjs\",\n    \"nodejs\",\n    \"ai\",\n    \"assistant\",\n    \"javascript\",\n    \"automation\",\n    \"textarea\"\n  ]\n}\n","import { createYoga } from \"graphql-yoga\";\nimport { CreateCopilotRuntimeServerOptions, getCommonConfig } from \"../shared\";\nimport telemetry from \"../../telemetry-client\";\n\nexport function copilotRuntimeNodeHttpEndpoint(options: CreateCopilotRuntimeServerOptions) {\n  const commonConfig = getCommonConfig(options);\n\n  telemetry.setGlobalProperties({\n    runtime: {\n      framework: \"node-http\",\n    },\n  });\n\n  if (options.properties?._copilotkit) {\n    telemetry.setGlobalProperties({\n      _copilotkit: options.properties._copilotkit,\n    });\n  }\n\n  telemetry.capture(\"oss.runtime.instance_created\", {});\n\n  const logger = commonConfig.logging;\n  logger.debug(\"Creating Node HTTP endpoint\");\n\n  const yoga = createYoga({\n    ...commonConfig,\n    graphqlEndpoint: options.endpoint,\n  });\n\n  return yoga;\n}\n","import { YogaInitialContext } from \"graphql-yoga\";\nimport { buildSchemaSync } from \"type-graphql\";\nimport { CopilotResolver } from \"../../graphql/resolvers/copilot.resolver\";\nimport { useDeferStream } from \"@graphql-yoga/plugin-defer-stream\";\nimport { CopilotRuntime } from \"../runtime/copilot-runtime\";\nimport { CopilotServiceAdapter } from \"../../service-adapters\";\nimport { CopilotCloudOptions } from \"../cloud\";\nimport { LogLevel, createLogger } from \"../../lib/logger\";\nimport { createYoga } from \"graphql-yoga\";\nimport telemetry from \"../telemetry-client\";\n\nconst logger = createLogger();\n\ntype AnyPrimitive = string | boolean | number | null;\nexport type CopilotRequestContextProperties = Record<\n  string,\n  AnyPrimitive | Record<string, AnyPrimitive>\n>;\n\nexport type GraphQLContext = YogaInitialContext & {\n  _copilotkit: CreateCopilotRuntimeServerOptions;\n  properties: CopilotRequestContextProperties;\n  logger: typeof logger;\n};\n\nexport interface CreateCopilotRuntimeServerOptions {\n  runtime: CopilotRuntime<any>;\n  serviceAdapter: CopilotServiceAdapter;\n  endpoint: string;\n  baseUrl?: string;\n  cloud?: CopilotCloudOptions;\n  properties?: CopilotRequestContextProperties;\n  logLevel?: LogLevel;\n}\n\nexport async function createContext(\n  initialContext: YogaInitialContext,\n  copilotKitContext: CreateCopilotRuntimeServerOptions,\n  contextLogger: typeof logger,\n  properties: CopilotRequestContextProperties = {},\n): Promise<Partial<GraphQLContext>> {\n  logger.debug({ copilotKitContext }, \"Creating GraphQL context\");\n  const ctx: GraphQLContext = {\n    ...initialContext,\n    _copilotkit: {\n      ...copilotKitContext,\n    },\n    properties: { ...properties },\n    logger: contextLogger,\n  };\n  return ctx;\n}\n\nexport function buildSchema(\n  options: {\n    emitSchemaFile?: string;\n  } = {},\n) {\n  logger.debug(\"Building GraphQL schema...\");\n  const schema = buildSchemaSync({\n    resolvers: [CopilotResolver],\n    emitSchemaFile: options.emitSchemaFile,\n  });\n  logger.debug(\"GraphQL schema built successfully\");\n  return schema;\n}\n\nexport type CommonConfig = {\n  logging: typeof logger;\n  schema: ReturnType<typeof buildSchema>;\n  plugins: Parameters<typeof createYoga>[0][\"plugins\"];\n  context: (ctx: YogaInitialContext) => Promise<Partial<GraphQLContext>>;\n};\n\nexport function getCommonConfig(options: CreateCopilotRuntimeServerOptions): CommonConfig {\n  const logLevel = (process.env.LOG_LEVEL as LogLevel) || (options.logLevel as LogLevel) || \"error\";\n  const logger = createLogger({ level: logLevel, component: \"getCommonConfig\" });\n\n  const contextLogger = createLogger({ level: logLevel });\n\n  if (options.cloud) {\n    telemetry.setCloudConfiguration({\n      publicApiKey: options.cloud.publicApiKey,\n      baseUrl: options.cloud.baseUrl,\n    });\n  }\n\n  if (options.properties?._copilotkit) {\n    telemetry.setGlobalProperties({\n      _copilotkit: {\n        ...(options.properties._copilotkit as Record<string, any>),\n      },\n    });\n  }\n\n  telemetry.setGlobalProperties({\n    runtime: {\n      serviceAdapter: options.serviceAdapter.constructor.name,\n    },\n  });\n\n  return {\n    logging: createLogger({ component: \"Yoga GraphQL\", level: logLevel }),\n    schema: buildSchema(),\n    plugins: [useDeferStream()],\n    context: (ctx: YogaInitialContext): Promise<Partial<GraphQLContext>> =>\n      createContext(ctx, options, contextLogger, options.properties),\n  };\n}\n","import { Arg, Ctx, Mutation, Query, Resolver } from \"type-graphql\";\nimport {\n  ReplaySubject,\n  Subject,\n  Subscription,\n  finalize,\n  firstValueFrom,\n  shareReplay,\n  skipWhile,\n  take,\n  takeWhile,\n  tap,\n} from \"rxjs\";\nimport { GenerateCopilotResponseInput } from \"../inputs/generate-copilot-response.input\";\nimport { CopilotResponse } from \"../types/copilot-response.type\";\nimport { MessageRole } from \"../types/enums\";\nimport { Repeater } from \"graphql-yoga\";\nimport type { CopilotRequestContextProperties, GraphQLContext } from \"../../lib/integrations\";\nimport { RuntimeEvent, RuntimeEventTypes } from \"../../service-adapters/events\";\nimport {\n  FailedMessageStatus,\n  MessageStatusUnion,\n  SuccessMessageStatus,\n} from \"../types/message-status.type\";\nimport { ResponseStatusUnion, SuccessResponseStatus } from \"../types/response-status.type\";\nimport { GraphQLJSONObject } from \"graphql-scalars\";\nimport { plainToInstance } from \"class-transformer\";\nimport { GuardrailsResult } from \"../types/guardrails-result.type\";\nimport { GraphQLError } from \"graphql\";\nimport {\n  GuardrailsValidationFailureResponse,\n  MessageStreamInterruptedResponse,\n  UnknownErrorResponse,\n} from \"../../utils\";\nimport {\n  ActionExecutionMessage,\n  AgentStateMessage,\n  Message,\n  ResultMessage,\n  TextMessage,\n} from \"../types/converted\";\nimport telemetry from \"../../lib/telemetry-client\";\nimport { randomId } from \"@copilotkit/shared\";\n\nconst invokeGuardrails = async ({\n  baseUrl,\n  copilotCloudPublicApiKey,\n  data,\n  onResult,\n  onError,\n}: {\n  baseUrl: string;\n  copilotCloudPublicApiKey: string;\n  data: GenerateCopilotResponseInput;\n  onResult: (result: GuardrailsResult) => void;\n  onError: (err: Error) => void;\n}) => {\n  if (\n    data.messages.length &&\n    data.messages[data.messages.length - 1].textMessage?.role === MessageRole.user\n  ) {\n    const messages = data.messages\n      .filter(\n        (m) =>\n          m.textMessage !== undefined &&\n          (m.textMessage.role === MessageRole.user || m.textMessage.role === MessageRole.assistant),\n      )\n      .map((m) => ({\n        role: m.textMessage!.role,\n        content: m.textMessage.content,\n      }));\n\n    const lastMessage = messages[messages.length - 1];\n    const restOfMessages = messages.slice(0, -1);\n\n    const body = {\n      input: lastMessage.content,\n      validTopics: data.cloud.guardrails.inputValidationRules.allowList,\n      invalidTopics: data.cloud.guardrails.inputValidationRules.denyList,\n      messages: restOfMessages,\n    };\n\n    const guardrailsResult = await fetch(`${baseUrl}/guardrails/validate`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CopilotCloud-Public-API-Key\": copilotCloudPublicApiKey,\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (guardrailsResult.ok) {\n      const resultJson: GuardrailsResult = await guardrailsResult.json();\n      onResult(resultJson);\n    } else {\n      onError(await guardrailsResult.json());\n    }\n  }\n};\n\n@Resolver(() => CopilotResponse)\nexport class CopilotResolver {\n  @Query(() => String)\n  async hello() {\n    return \"Hello World\";\n  }\n\n  @Mutation(() => CopilotResponse)\n  async generateCopilotResponse(\n    @Ctx() ctx: GraphQLContext,\n    @Arg(\"data\") data: GenerateCopilotResponseInput,\n    @Arg(\"properties\", () => GraphQLJSONObject, { nullable: true })\n    properties?: CopilotRequestContextProperties,\n  ) {\n    telemetry.capture(\"oss.runtime.copilot_request_created\", {\n      \"cloud.guardrails.enabled\": data.cloud?.guardrails !== undefined,\n      requestType: data.metadata.requestType,\n    });\n\n    let logger = ctx.logger.child({ component: \"CopilotResolver.generateCopilotResponse\" });\n    logger.debug({ data }, \"Generating Copilot response\");\n\n    if (properties) {\n      logger.debug(\"Properties provided, merging with context properties\");\n      ctx.properties = { ...ctx.properties, ...properties };\n    }\n\n    const copilotRuntime = ctx._copilotkit.runtime;\n    const serviceAdapter = ctx._copilotkit.serviceAdapter;\n\n    let copilotCloudPublicApiKey: string | null = null;\n    let copilotCloudBaseUrl: string;\n\n    if (data.cloud) {\n      logger = logger.child({ cloud: true });\n      logger.debug(\"Cloud configuration provided, checking for public API key in headers\");\n      const key = ctx.request.headers.get(\"x-copilotcloud-public-api-key\");\n      if (key) {\n        logger.debug(\"Public API key found in headers\");\n        copilotCloudPublicApiKey = key;\n      } else {\n        logger.error(\"Public API key not found in headers\");\n        throw new GraphQLError(\"X-CopilotCloud-Public-API-Key header is required\");\n      }\n\n      if (process.env.COPILOT_CLOUD_BASE_URL) {\n        copilotCloudBaseUrl = process.env.COPILOT_CLOUD_BASE_URL;\n      } else if (ctx._copilotkit.cloud?.baseUrl) {\n        copilotCloudBaseUrl = ctx._copilotkit.cloud?.baseUrl;\n      } else {\n        copilotCloudBaseUrl = \"https://api.cloud.copilotkit.ai\";\n      }\n\n      logger = logger.child({ copilotCloudBaseUrl });\n    }\n\n    logger.debug(\"Setting up subjects\");\n    const responseStatus$ = new ReplaySubject<typeof ResponseStatusUnion>();\n    const interruptStreaming$ = new ReplaySubject<{ reason: string; messageId?: string }>();\n    const guardrailsResult$ = new ReplaySubject<GuardrailsResult>();\n\n    let outputMessages: Message[] = [];\n    let resolveOutputMessagesPromise: (messages: Message[]) => void;\n    let rejectOutputMessagesPromise: (err: Error) => void;\n\n    const outputMessagesPromise = new Promise<Message[]>((resolve, reject) => {\n      resolveOutputMessagesPromise = resolve;\n      rejectOutputMessagesPromise = reject;\n    });\n\n    logger.debug(\"Processing\");\n    const {\n      eventSource,\n      threadId = randomId(),\n      runId,\n      serverSideActions,\n      actionInputsWithoutAgents,\n    } = await copilotRuntime.processRuntimeRequest({\n      serviceAdapter,\n      messages: data.messages,\n      actions: data.frontend.actions,\n      threadId: data.threadId,\n      runId: data.runId,\n      publicApiKey: undefined,\n      outputMessagesPromise,\n      graphqlContext: ctx,\n      forwardedParameters: data.forwardedParameters,\n      agentSession: data.agentSession,\n      agentStates: data.agentStates,\n      url: data.frontend.url,\n    });\n\n    logger.debug(\"Event source created, creating response\");\n\n    const response = {\n      threadId,\n      runId,\n      status: firstValueFrom(responseStatus$),\n      messages: new Repeater(async (pushMessage, stopStreamingMessages) => {\n        logger.debug(\"Messages repeater created\");\n\n        if (data.cloud?.guardrails) {\n          logger = logger.child({ guardrails: true });\n          logger.debug(\"Guardrails is enabled, validating input\");\n\n          invokeGuardrails({\n            baseUrl: copilotCloudBaseUrl,\n            copilotCloudPublicApiKey,\n            data,\n            onResult: (result) => {\n              logger.debug({ status: result.status }, \"Guardrails validation done\");\n              guardrailsResult$.next(result);\n\n              // Guardrails validation failed\n              if (result.status === \"denied\") {\n                // send the reason to the client and interrupt streaming\n                responseStatus$.next(\n                  new GuardrailsValidationFailureResponse({ guardrailsReason: result.reason }),\n                );\n                interruptStreaming$.next({\n                  reason: `Interrupted due to Guardrails validation failure. Reason: ${result.reason}`,\n                });\n\n                // resolve messages promise to the middleware\n                outputMessages = [\n                  plainToInstance(TextMessage, {\n                    id: randomId(),\n                    createdAt: new Date(),\n                    content: result.reason,\n                    role: MessageRole.assistant,\n                  }),\n                ];\n                resolveOutputMessagesPromise(outputMessages);\n              }\n            },\n            onError: (err) => {\n              logger.error({ err }, \"Error in guardrails validation\");\n              responseStatus$.next(\n                new UnknownErrorResponse({\n                  description: `An unknown error has occurred in the guardrails validation`,\n                }),\n              );\n              interruptStreaming$.next({\n                reason: `Interrupted due to unknown error in guardrails validation`,\n              });\n\n              // reject the middleware promise\n              rejectOutputMessagesPromise(err);\n            },\n          });\n        }\n\n        let eventStreamSubscription: Subscription;\n\n        // run and process the event stream\n        const eventStream = eventSource\n          .processRuntimeEvents({\n            serverSideActions,\n            guardrailsResult$: data.cloud?.guardrails ? guardrailsResult$ : null,\n            actionInputsWithoutAgents: actionInputsWithoutAgents.filter(\n              // TODO-AGENTS: do not exclude ALL server side actions\n              (action) =>\n                !serverSideActions.find((serverSideAction) => serverSideAction.name == action.name),\n            ),\n          })\n          .pipe(\n            // shareReplay() ensures that later subscribers will see the whole stream instead of\n            // just the events that were emitted after the subscriber was added.\n            shareReplay(),\n            finalize(() => {\n              logger.debug(\"Event stream finalized\");\n            }),\n          );\n\n        logger.debug(\"Event stream created, subscribing to event stream\");\n\n        eventStreamSubscription = eventStream.subscribe({\n          next: async (event) => {\n            switch (event.type) {\n              ////////////////////////////////\n              // TextMessageStart\n              ////////////////////////////////\n              case RuntimeEventTypes.TextMessageStart:\n                // create a sub stream that contains the message content\n                const textMessageContentStream = eventStream.pipe(\n                  // skip until this message start event\n                  skipWhile((e) => e !== event),\n                  // take until the message end event\n                  takeWhile((e) => e.type != RuntimeEventTypes.TextMessageEnd),\n                );\n\n                // signal when we are done streaming\n                const streamingTextStatus = new Subject<typeof MessageStatusUnion>();\n\n                const messageId = randomId();\n                // push the new message\n                pushMessage({\n                  id: messageId,\n                  status: firstValueFrom(streamingTextStatus),\n                  createdAt: new Date(),\n                  role: MessageRole.assistant,\n                  content: new Repeater(async (pushTextChunk, stopStreamingText) => {\n                    logger.debug(\"Text message content repeater created\");\n\n                    const textChunks: string[] = [];\n                    let textSubscription: Subscription;\n\n                    interruptStreaming$\n                      .pipe(\n                        shareReplay(),\n                        take(1),\n                        tap(({ reason, messageId }) => {\n                          logger.debug({ reason, messageId }, \"Text streaming interrupted\");\n\n                          streamingTextStatus.next(\n                            plainToInstance(FailedMessageStatus, { reason }),\n                          );\n\n                          responseStatus$.next(new MessageStreamInterruptedResponse({ messageId }));\n                          stopStreamingText();\n                          textSubscription?.unsubscribe();\n                        }),\n                      )\n                      .subscribe();\n\n                    logger.debug(\"Subscribing to text message content stream\");\n\n                    textSubscription = textMessageContentStream.subscribe({\n                      next: async (e: RuntimeEvent) => {\n                        if (e.type == RuntimeEventTypes.TextMessageContent) {\n                          await pushTextChunk(e.content);\n                          textChunks.push(e.content);\n                        }\n                      },\n                      error: (err) => {\n                        logger.error({ err }, \"Error in text message content stream\");\n                        interruptStreaming$.next({\n                          reason: \"Error streaming message content\",\n                          messageId,\n                        });\n                        stopStreamingText();\n                        textSubscription?.unsubscribe();\n                      },\n                      complete: () => {\n                        logger.debug(\"Text message content stream completed\");\n                        streamingTextStatus.next(new SuccessMessageStatus());\n                        stopStreamingText();\n                        textSubscription?.unsubscribe();\n\n                        outputMessages.push(\n                          plainToInstance(TextMessage, {\n                            id: messageId,\n                            createdAt: new Date(),\n                            content: textChunks.join(\"\"),\n                            role: MessageRole.assistant,\n                          }),\n                        );\n                      },\n                    });\n                  }),\n                });\n                break;\n              ////////////////////////////////\n              // ActionExecutionStart\n              ////////////////////////////////\n              case RuntimeEventTypes.ActionExecutionStart:\n                logger.debug(\"Action execution start event received\");\n                const actionExecutionArgumentStream = eventStream.pipe(\n                  skipWhile((e) => e !== event),\n                  takeWhile((e) => e.type != RuntimeEventTypes.ActionExecutionEnd),\n                );\n                const streamingArgumentsStatus = new Subject<typeof MessageStatusUnion>();\n                pushMessage({\n                  id: event.actionExecutionId,\n                  status: firstValueFrom(streamingArgumentsStatus),\n                  createdAt: new Date(),\n                  name: event.actionName,\n                  scope: event.scope!,\n                  arguments: new Repeater(async (pushArgumentsChunk, stopStreamingArguments) => {\n                    logger.debug(\"Action execution argument stream created\");\n\n                    const argumentChunks: string[] = [];\n                    let actionExecutionArgumentSubscription: Subscription;\n\n                    actionExecutionArgumentSubscription = actionExecutionArgumentStream.subscribe({\n                      next: async (e: RuntimeEvent) => {\n                        if (e.type == RuntimeEventTypes.ActionExecutionArgs) {\n                          await pushArgumentsChunk(e.args);\n                          argumentChunks.push(e.args);\n                        }\n                      },\n                      error: (err) => {\n                        logger.error({ err }, \"Error in action execution argument stream\");\n                        streamingArgumentsStatus.next(\n                          plainToInstance(FailedMessageStatus, {\n                            reason:\n                              \"An unknown error has occurred in the action execution argument stream\",\n                          }),\n                        );\n                        stopStreamingArguments();\n                        actionExecutionArgumentSubscription?.unsubscribe();\n                      },\n                      complete: () => {\n                        logger.debug(\"Action execution argument stream completed\");\n                        streamingArgumentsStatus.next(new SuccessMessageStatus());\n                        stopStreamingArguments();\n                        actionExecutionArgumentSubscription?.unsubscribe();\n\n                        outputMessages.push(\n                          plainToInstance(ActionExecutionMessage, {\n                            id: event.actionExecutionId,\n                            createdAt: new Date(),\n                            name: event.actionName,\n                            scope: event.scope!,\n                            arguments: argumentChunks.join(\"\"),\n                          }),\n                        );\n                      },\n                    });\n                  }),\n                });\n                break;\n              ////////////////////////////////\n              // ActionExecutionResult\n              ////////////////////////////////\n              case RuntimeEventTypes.ActionExecutionResult:\n                logger.debug({ result: event.result }, \"Action execution result event received\");\n                pushMessage({\n                  id: randomId(),\n                  status: new SuccessMessageStatus(),\n                  createdAt: new Date(),\n                  actionExecutionId: event.actionExecutionId,\n                  actionName: event.actionName,\n                  result: event.result,\n                });\n\n                outputMessages.push(\n                  plainToInstance(ResultMessage, {\n                    id: randomId(),\n                    createdAt: new Date(),\n                    actionExecutionId: event.actionExecutionId,\n                    actionName: event.actionName,\n                    result: event.result,\n                  }),\n                );\n                break;\n              ////////////////////////////////\n              // AgentStateMessage\n              ////////////////////////////////\n              case RuntimeEventTypes.AgentStateMessage:\n                logger.debug({ event }, \"Agent message event received\");\n                pushMessage({\n                  id: randomId(),\n                  status: new SuccessMessageStatus(),\n                  threadId: event.threadId,\n                  agentName: event.agentName,\n                  nodeName: event.nodeName,\n                  runId: event.runId,\n                  active: event.active,\n                  state: event.state,\n                  running: event.running,\n                  role: MessageRole.assistant,\n                  createdAt: new Date(),\n                });\n                outputMessages.push(\n                  plainToInstance(AgentStateMessage, {\n                    id: randomId(),\n                    threadId: event.threadId,\n                    agentName: event.agentName,\n                    nodeName: event.nodeName,\n                    runId: event.runId,\n                    active: event.active,\n                    state: event.state,\n                    running: event.running,\n                    role: MessageRole.assistant,\n                    createdAt: new Date(),\n                  }),\n                );\n                break;\n            }\n          },\n          error: (err) => {\n            logger.error({ err }, \"Error in event stream\");\n            responseStatus$.next(\n              new UnknownErrorResponse({\n                description: `An unknown error has occurred in the event stream`,\n              }),\n            );\n            eventStreamSubscription?.unsubscribe();\n            stopStreamingMessages();\n\n            rejectOutputMessagesPromise(err);\n          },\n          complete: async () => {\n            logger.debug(\"Event stream completed\");\n            if (data.cloud?.guardrails) {\n              logger.debug(\"Guardrails is enabled, waiting for guardrails result\");\n              await firstValueFrom(guardrailsResult$);\n            }\n            responseStatus$.next(new SuccessResponseStatus());\n            eventStreamSubscription?.unsubscribe();\n            stopStreamingMessages();\n\n            resolveOutputMessagesPromise(outputMessages);\n          },\n        });\n      }),\n    };\n\n    return response;\n  }\n}\n","import { Field, InputType } from \"type-graphql\";\nimport { MessageInput } from \"./message.input\";\nimport { FrontendInput } from \"./frontend.input\";\nimport { CloudInput } from \"./cloud.input\";\nimport { CopilotRequestType } from \"../types/enums\";\nimport { ForwardedParametersInput } from \"./forwarded-parameters.input\";\nimport { AgentSessionInput } from \"./agent-session.input\";\nimport { AgentStateInput } from \"./agent-state.input\";\n\n@InputType()\nexport class GenerateCopilotResponseMetadataInput {\n  @Field(() => CopilotRequestType, { nullable: true })\n  requestType: CopilotRequestType;\n}\n\n@InputType()\nexport class GenerateCopilotResponseInput {\n  @Field(() => GenerateCopilotResponseMetadataInput, { nullable: false })\n  metadata: GenerateCopilotResponseMetadataInput;\n\n  @Field(() => String, { nullable: true })\n  threadId?: string;\n\n  @Field(() => String, { nullable: true })\n  runId?: string;\n\n  @Field(() => [MessageInput])\n  messages: MessageInput[];\n\n  @Field(() => FrontendInput)\n  frontend: FrontendInput;\n\n  @Field(() => CloudInput, { nullable: true })\n  cloud?: CloudInput;\n\n  @Field(() => ForwardedParametersInput, { nullable: true })\n  forwardedParameters?: ForwardedParametersInput;\n\n  @Field(() => AgentSessionInput, { nullable: true })\n  agentSession?: AgentSessionInput;\n\n  @Field(() => AgentStateInput, { nullable: true })\n  agentState?: AgentStateInput;\n\n  @Field(() => [AgentStateInput], { nullable: true })\n  agentStates?: AgentStateInput[];\n}\n","import { Field, InputType } from \"type-graphql\";\nimport { MessageRole, ActionExecutionScope } from \"../types/enums\";\nimport { BaseMessage } from \"../types/base\";\n\n// GraphQL does not support union types in inputs, so we need to use\n// optional fields for the different subtypes.\n@InputType()\nexport class MessageInput extends BaseMessage {\n  @Field(() => TextMessageInput, { nullable: true })\n  textMessage?: TextMessageInput;\n\n  @Field(() => ActionExecutionMessageInput, { nullable: true })\n  actionExecutionMessage?: ActionExecutionMessageInput;\n\n  @Field(() => ResultMessageInput, { nullable: true })\n  resultMessage?: ResultMessageInput;\n\n  @Field(() => AgentStateMessageInput, { nullable: true })\n  agentStateMessage?: AgentStateMessageInput;\n}\n\n@InputType()\nexport class TextMessageInput {\n  @Field(() => String)\n  content: string;\n\n  @Field(() => MessageRole)\n  role: MessageRole;\n}\n\n@InputType()\nexport class ActionExecutionMessageInput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => String)\n  arguments: string;\n\n  @Field(() => ActionExecutionScope)\n  scope: ActionExecutionScope;\n}\n\n@InputType()\nexport class ResultMessageInput {\n  @Field(() => String)\n  actionExecutionId: string;\n\n  @Field(() => String)\n  actionName: string;\n\n  @Field(() => String)\n  result: string;\n}\n\n@InputType()\nexport class AgentStateMessageInput {\n  @Field(() => String)\n  threadId: string;\n\n  @Field(() => String)\n  agentName: string;\n\n  @Field(() => MessageRole)\n  role: MessageRole;\n\n  @Field(() => String)\n  state: string;\n\n  @Field(() => Boolean)\n  running: boolean;\n\n  @Field(() => String)\n  nodeName: string;\n\n  @Field(() => String)\n  runId: string;\n\n  @Field(() => Boolean)\n  active: boolean;\n}\n","import { registerEnumType } from \"type-graphql\";\n\nexport enum MessageRole {\n  user = \"user\",\n  assistant = \"assistant\",\n  system = \"system\",\n}\n\nexport enum ActionExecutionScope {\n  server = \"server\",\n  client = \"client\",\n  passThrough = \"passThrough\",\n}\n\nexport enum CopilotRequestType {\n  Chat = \"Chat\",\n  Task = \"Task\",\n  TextareaCompletion = \"TextareaCompletion\",\n  TextareaPopover = \"TextareaPopover\",\n  Suggestion = \"Suggestion\",\n}\n\nregisterEnumType(MessageRole, {\n  name: \"MessageRole\",\n  description: \"The role of the message\",\n});\n\nregisterEnumType(ActionExecutionScope, {\n  name: \"ActionExecutionScope\",\n  description: \"The scope of the action\",\n});\n\nregisterEnumType(CopilotRequestType, {\n  name: \"CopilotRequestType\",\n  description: \"The type of Copilot request\",\n});\n","import { Field, InputType } from \"type-graphql\";\nimport { ActionInput } from \"./action.input\";\n\n@InputType()\nexport class FrontendInput {\n  @Field(() => String, { nullable: true })\n  toDeprecate_fullContext?: string;\n\n  @Field(() => [ActionInput])\n  actions: ActionInput[];\n\n  @Field(() => String, { nullable: true })\n  url?: string;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class ActionInput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => String)\n  description: string;\n\n  @Field(() => String)\n  jsonSchema: string;\n}\n","import { Field, InputType } from \"type-graphql\";\nimport { GuardrailsInput } from \"./cloud-guardrails.input\";\n\n@InputType()\nexport class CloudInput {\n  @Field(() => GuardrailsInput, { nullable: true })\n  guardrails?: GuardrailsInput;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class GuardrailsRuleInput {\n  @Field(() => [String], { nullable: true })\n  allowList?: string[] = [];\n\n  @Field(() => [String], { nullable: true })\n  denyList?: string[] = [];\n}\n\n@InputType()\nexport class GuardrailsInput {\n  @Field(() => GuardrailsRuleInput, { nullable: false })\n  inputValidationRules: GuardrailsRuleInput;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class ForwardedParametersInput {\n  @Field(() => String, { nullable: true })\n  model?: string;\n\n  @Field(() => Number, { nullable: true })\n  maxTokens?: number;\n\n  @Field(() => [String], { nullable: true })\n  stop?: string[];\n\n  @Field(() => String, { nullable: true })\n  toolChoice?: String;\n\n  @Field(() => String, { nullable: true })\n  toolChoiceFunctionName?: string;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class AgentSessionInput {\n  @Field(() => String)\n  agentName: string;\n\n  @Field(() => String, { nullable: true })\n  threadId?: string;\n\n  @Field(() => String, { nullable: true })\n  nodeName?: string;\n}\n","import { Field, InputType } from \"type-graphql\";\n\n@InputType()\nexport class AgentStateInput {\n  @Field(() => String)\n  agentName: string;\n\n  @Field(() => String)\n  state: string;\n}\n","import { Field, InterfaceType, ObjectType } from \"type-graphql\";\nimport { MessageRole, ActionExecutionScope } from \"./enums\";\nimport { MessageStatusUnion } from \"./message-status.type\";\nimport { ResponseStatusUnion } from \"./response-status.type\";\n\n@InterfaceType({\n  resolveType(value) {\n    if (value.hasOwnProperty(\"content\")) {\n      return TextMessageOutput;\n    } else if (value.hasOwnProperty(\"name\")) {\n      return ActionExecutionMessageOutput;\n    } else if (value.hasOwnProperty(\"result\")) {\n      return ResultMessageOutput;\n    } else if (value.hasOwnProperty(\"state\")) {\n      return AgentStateMessageOutput;\n    }\n    return undefined;\n  },\n})\nabstract class BaseMessageOutput {\n  @Field(() => String)\n  id: string;\n\n  @Field(() => Date)\n  createdAt: Date;\n\n  @Field(() => MessageStatusUnion)\n  status: typeof MessageStatusUnion;\n}\n\n@ObjectType({ implements: BaseMessageOutput })\nexport class TextMessageOutput {\n  @Field(() => MessageRole)\n  role: MessageRole;\n\n  @Field(() => [String])\n  content: string[];\n}\n\n@ObjectType({ implements: BaseMessageOutput })\nexport class ActionExecutionMessageOutput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => ActionExecutionScope)\n  scope: ActionExecutionScope;\n\n  @Field(() => [String])\n  arguments: string[];\n}\n\n@ObjectType({ implements: BaseMessageOutput })\nexport class ResultMessageOutput {\n  @Field(() => String)\n  actionExecutionId: string;\n\n  @Field(() => String)\n  actionName: string;\n\n  @Field(() => String)\n  result: string;\n}\n\n@ObjectType({ implements: BaseMessageOutput })\nexport class AgentStateMessageOutput {\n  @Field(() => String)\n  threadId: string;\n\n  @Field(() => String)\n  agentName: string;\n\n  @Field(() => String)\n  nodeName: string;\n\n  @Field(() => String)\n  runId: string;\n\n  @Field(() => Boolean)\n  active: boolean;\n\n  @Field(() => MessageRole)\n  role: MessageRole;\n\n  @Field(() => String)\n  state: string;\n\n  @Field(() => Boolean)\n  running: boolean;\n}\n\n@ObjectType()\nexport class CopilotResponse {\n  @Field(() => String)\n  threadId!: string;\n\n  @Field(() => ResponseStatusUnion)\n  status: typeof ResponseStatusUnion;\n\n  @Field({ nullable: true })\n  runId?: string;\n\n  @Field(() => [BaseMessageOutput])\n  messages: (typeof BaseMessageOutput)[];\n}\n","import { Field, ObjectType, createUnionType, registerEnumType } from \"type-graphql\";\n\nexport enum MessageStatusCode {\n  Pending = \"pending\",\n  Success = \"success\",\n  Failed = \"failed\",\n}\n\nregisterEnumType(MessageStatusCode, {\n  name: \"MessageStatusCode\",\n});\n\n@ObjectType()\nclass BaseMessageStatus {\n  @Field(() => MessageStatusCode)\n  code: MessageStatusCode;\n}\n\n@ObjectType()\nexport class PendingMessageStatus extends BaseMessageStatus {\n  code: MessageStatusCode = MessageStatusCode.Pending;\n}\n\n@ObjectType()\nexport class SuccessMessageStatus extends BaseMessageStatus {\n  code: MessageStatusCode = MessageStatusCode.Success;\n}\n\n@ObjectType()\nexport class FailedMessageStatus extends BaseMessageStatus {\n  code: MessageStatusCode = MessageStatusCode.Failed;\n\n  @Field(() => String)\n  reason: string;\n}\n\nexport const MessageStatusUnion = createUnionType({\n  name: \"MessageStatus\",\n  types: () => [PendingMessageStatus, SuccessMessageStatus, FailedMessageStatus] as const,\n});\n","import { Action } from \"@copilotkit/shared\";\nimport {\n  of,\n  concat,\n  map,\n  scan,\n  concatMap,\n  ReplaySubject,\n  Subject,\n  firstValueFrom,\n  from,\n} from \"rxjs\";\nimport { streamLangChainResponse } from \"./langchain/utils\";\nimport { GuardrailsResult } from \"../graphql/types/guardrails-result.type\";\nimport telemetry from \"../lib/telemetry-client\";\nimport { isLangGraphAgentAction } from \"../lib/runtime/remote-actions\";\nimport { ActionInput } from \"../graphql/inputs/action.input\";\n\nexport enum RuntimeEventTypes {\n  TextMessageStart = \"TextMessageStart\",\n  TextMessageContent = \"TextMessageContent\",\n  TextMessageEnd = \"TextMessageEnd\",\n  ActionExecutionStart = \"ActionExecutionStart\",\n  ActionExecutionArgs = \"ActionExecutionArgs\",\n  ActionExecutionEnd = \"ActionExecutionEnd\",\n  ActionExecutionResult = \"ActionExecutionResult\",\n  AgentStateMessage = \"AgentStateMessage\",\n}\n\ntype FunctionCallScope = \"client\" | \"server\" | \"passThrough\";\n\nexport type RuntimeEvent =\n  | { type: RuntimeEventTypes.TextMessageStart; messageId: string }\n  | {\n      type: RuntimeEventTypes.TextMessageContent;\n      content: string;\n    }\n  | { type: RuntimeEventTypes.TextMessageEnd }\n  | {\n      type: RuntimeEventTypes.ActionExecutionStart;\n      actionExecutionId: string;\n      actionName: string;\n      scope?: FunctionCallScope;\n    }\n  | { type: RuntimeEventTypes.ActionExecutionArgs; args: string }\n  | { type: RuntimeEventTypes.ActionExecutionEnd }\n  | {\n      type: RuntimeEventTypes.ActionExecutionResult;\n      actionName: string;\n      actionExecutionId: string;\n      result: string;\n    }\n  | {\n      type: RuntimeEventTypes.AgentStateMessage;\n      threadId: string;\n      agentName: string;\n      nodeName: string;\n      runId: string;\n      active: boolean;\n      role: string;\n      state: string;\n      running: boolean;\n    };\n\ninterface RuntimeEventWithState {\n  event: RuntimeEvent | null;\n  callActionServerSide: boolean;\n  action: Action<any> | null;\n  actionExecutionId: string | null;\n  args: string;\n}\n\ntype EventSourceCallback = (eventStream$: RuntimeEventSubject) => Promise<void>;\n\nexport class RuntimeEventSubject extends ReplaySubject<RuntimeEvent> {\n  constructor() {\n    super();\n  }\n\n  sendTextMessageStart(messageId: string) {\n    this.next({ type: RuntimeEventTypes.TextMessageStart, messageId });\n  }\n\n  sendTextMessageContent(content: string) {\n    this.next({ type: RuntimeEventTypes.TextMessageContent, content });\n  }\n\n  sendTextMessageEnd() {\n    this.next({ type: RuntimeEventTypes.TextMessageEnd });\n  }\n\n  sendTextMessage(messageId: string, content: string) {\n    this.sendTextMessageStart(messageId);\n    this.sendTextMessageContent(content);\n    this.sendTextMessageEnd();\n  }\n\n  sendActionExecutionStart(actionExecutionId: string, actionName: string) {\n    this.next({\n      type: RuntimeEventTypes.ActionExecutionStart,\n      actionExecutionId,\n      actionName,\n    });\n  }\n\n  sendActionExecutionArgs(args: string) {\n    this.next({ type: RuntimeEventTypes.ActionExecutionArgs, args });\n  }\n\n  sendActionExecutionEnd() {\n    this.next({ type: RuntimeEventTypes.ActionExecutionEnd });\n  }\n\n  sendActionExecution(actionExecutionId: string, toolName: string, args: string) {\n    this.sendActionExecutionStart(actionExecutionId, toolName);\n    this.sendActionExecutionArgs(args);\n    this.sendActionExecutionEnd();\n  }\n\n  sendActionExecutionResult(actionExecutionId: string, actionName: string, result: string) {\n    this.next({\n      type: RuntimeEventTypes.ActionExecutionResult,\n      actionName,\n      actionExecutionId,\n      result,\n    });\n  }\n\n  sendAgentStateMessage(\n    threadId: string,\n    agentName: string,\n    nodeName: string,\n    runId: string,\n    active: boolean,\n    role: string,\n    state: string,\n    running: boolean,\n  ) {\n    this.next({\n      type: RuntimeEventTypes.AgentStateMessage,\n      threadId,\n      agentName,\n      nodeName,\n      runId,\n      active,\n      role,\n      state,\n      running,\n    });\n  }\n}\n\nexport class RuntimeEventSource {\n  private eventStream$ = new RuntimeEventSubject();\n  private callback!: EventSourceCallback;\n\n  async stream(callback: EventSourceCallback): Promise<void> {\n    this.callback = callback;\n  }\n\n  processRuntimeEvents({\n    serverSideActions,\n    guardrailsResult$,\n    actionInputsWithoutAgents,\n  }: {\n    serverSideActions: Action<any>[];\n    guardrailsResult$?: Subject<GuardrailsResult>;\n    actionInputsWithoutAgents: ActionInput[];\n  }) {\n    this.callback(this.eventStream$).catch((error) => {\n      console.error(\"Error in event source callback\", error);\n    });\n    return this.eventStream$.pipe(\n      // mark tools for server side execution\n      map((event) => {\n        if (event.type === RuntimeEventTypes.ActionExecutionStart) {\n          if (event.scope !== \"passThrough\") {\n            event.scope = serverSideActions.find((action) => action.name === event.actionName)\n              ? \"server\"\n              : \"client\";\n          }\n        }\n        return event;\n      }),\n      // track state\n      scan(\n        (acc, event) => {\n          // It seems like this is needed so that rxjs recognizes the object has changed\n          // This fixes an issue where action were executed multiple times\n          // Not investigating further for now (Markus)\n          acc = { ...acc };\n\n          if (event.type === RuntimeEventTypes.ActionExecutionStart) {\n            acc.callActionServerSide = event.scope === \"server\";\n            acc.args = \"\";\n            acc.actionExecutionId = event.actionExecutionId;\n            if (acc.callActionServerSide) {\n              acc.action = serverSideActions.find((action) => action.name === event.actionName);\n            }\n          } else if (event.type === RuntimeEventTypes.ActionExecutionArgs) {\n            acc.args += event.args;\n          }\n\n          acc.event = event;\n\n          return acc;\n        },\n        {\n          event: null,\n          callActionServerSide: false,\n          args: \"\",\n          actionExecutionId: null,\n          action: null,\n        } as RuntimeEventWithState,\n      ),\n      concatMap((eventWithState) => {\n        if (\n          eventWithState.event!.type === RuntimeEventTypes.ActionExecutionEnd &&\n          eventWithState.callActionServerSide\n        ) {\n          const toolCallEventStream$ = new RuntimeEventSubject();\n          executeAction(\n            toolCallEventStream$,\n            guardrailsResult$ ? guardrailsResult$ : null,\n            eventWithState.action!,\n            eventWithState.args,\n            eventWithState.actionExecutionId,\n            actionInputsWithoutAgents,\n          ).catch((error) => {\n            console.error(error);\n          });\n\n          telemetry.capture(\"oss.runtime.server_action_executed\", {});\n          return concat(of(eventWithState.event!), toolCallEventStream$);\n        } else {\n          return of(eventWithState.event!);\n        }\n      }),\n    );\n  }\n}\n\nasync function executeAction(\n  eventStream$: RuntimeEventSubject,\n  guardrailsResult$: Subject<GuardrailsResult> | null,\n  action: Action<any>,\n  actionArguments: string,\n  actionExecutionId: string,\n  actionInputsWithoutAgents: ActionInput[],\n) {\n  if (guardrailsResult$) {\n    const { status } = await firstValueFrom(guardrailsResult$);\n\n    if (status === \"denied\") {\n      eventStream$.complete();\n      return;\n    }\n  }\n\n  // Prepare arguments for function calling\n  let args: Record<string, any>[] = [];\n  if (actionArguments) {\n    args = JSON.parse(actionArguments);\n  }\n\n  // handle LangGraph agents\n  if (isLangGraphAgentAction(action)) {\n    eventStream$.sendActionExecutionResult(\n      actionExecutionId,\n      action.name,\n      `${action.name} agent started`,\n    );\n    const stream = await action.langGraphAgentHandler({\n      name: action.name,\n      actionInputsWithoutAgents,\n    });\n\n    // forward to eventStream$\n    from(stream).subscribe({\n      next: (event) => eventStream$.next(event),\n      error: (err) => console.error(\"Error in stream\", err),\n      complete: () => eventStream$.complete(),\n    });\n  } else {\n    // call the function\n    const result = await action.handler?.(args);\n\n    await streamLangChainResponse({\n      result,\n      eventStream$,\n      actionExecution: {\n        name: action.name,\n        id: actionExecutionId,\n      },\n    });\n  }\n}\n","import { TelemetryClient } from \"@copilotkit/shared\";\nconst packageJson = require(\"../../package.json\");\n\nconst telemetryClient = new TelemetryClient({\n  packageName: packageJson.name,\n  packageVersion: packageJson.version,\n});\n\nexport default telemetryClient;\n","import { ReplaySubject, scan, mergeMap } from \"rxjs\";\nimport { LangGraphEvent, LangGraphEventTypes } from \"./events\";\nimport { RuntimeEvent, RuntimeEventTypes } from \"../../service-adapters/events\";\n\ninterface LangGraphEventWithState {\n  event: LangGraphEvent | null;\n  toolCallName: string | null;\n  toolCallId: string | null;\n  prevToolCallId: string | null;\n  messageId: string | null;\n  prevMessageId: string | null;\n}\n\nexport class RemoteLangGraphEventSource {\n  private eventStream$ = new ReplaySubject<LangGraphEvent>();\n\n  async streamResponse(response: Response) {\n    const reader = response.body!.getReader();\n    const decoder = new TextDecoder();\n    let buffer = [];\n    const eventStream$ = this.eventStream$;\n\n    function flushBuffer() {\n      const currentBuffer = buffer.join(\"\");\n      if (currentBuffer.trim().length === 0) {\n        return;\n      }\n      const parts = currentBuffer.split(\"\\n\");\n      if (parts.length === 0) {\n        return;\n      }\n\n      const lastPartIsComplete = currentBuffer.endsWith(\"\\n\");\n\n      // truncate buffer\n      buffer = [];\n\n      if (!lastPartIsComplete) {\n        // put back the last part\n        buffer.push(parts.pop());\n      }\n\n      parts\n        .map((part) => part.trim())\n        .filter((part) => part != \"\")\n        .forEach((part) => {\n          eventStream$.next(JSON.parse(part));\n        });\n    }\n\n    while (true) {\n      const { done, value } = await reader.read();\n\n      if (!done) {\n        buffer.push(decoder.decode(value, { stream: true }));\n      }\n\n      flushBuffer();\n\n      if (done) {\n        break;\n      }\n    }\n    eventStream$.complete();\n  }\n\n  processLangGraphEvents() {\n    return this.eventStream$.pipe(\n      scan(\n        (acc, event) => {\n          if (event.event === LangGraphEventTypes.OnChatModelStream) {\n            if (event.data?.chunk?.kwargs?.tool_call_chunks) {\n              acc.prevToolCallId = acc.toolCallId;\n              acc.toolCallId = event.data.chunk.kwargs?.id;\n              if (event.data.chunk.kwargs.tool_call_chunks[0]?.name) {\n                acc.toolCallName = event.data.chunk.kwargs.tool_call_chunks[0].name;\n              }\n            }\n            acc.prevMessageId = acc.messageId;\n            acc.messageId = event.data?.chunk?.kwargs?.id;\n          } else {\n            acc.prevToolCallId = acc.toolCallId;\n            acc.toolCallId = null;\n            acc.prevMessageId = acc.messageId;\n            acc.messageId = null;\n            acc.toolCallName = null;\n          }\n\n          acc.event = event;\n          return acc;\n        },\n        {\n          event: null,\n          toolCallId: null,\n          prevToolCallId: null,\n          messageId: null,\n          toolCallName: null,\n          prevMessageId: null,\n        } as LangGraphEventWithState,\n      ),\n      mergeMap((eventWithState): RuntimeEvent[] => {\n        const events: RuntimeEvent[] = [];\n\n        let shouldEmitMessages = false;\n        let shouldEmitToolCalls = false;\n\n        if (eventWithState.event.event == LangGraphEventTypes.OnChatModelStream) {\n          if (eventWithState.event.tags?.includes(\"copilotkit:emit-tool-calls\")) {\n            shouldEmitToolCalls = true;\n          }\n          if (eventWithState.event.tags?.includes(\"copilotkit:emit-messages\")) {\n            shouldEmitMessages = true;\n          }\n        }\n\n        // Tool call ended: emit ActionExecutionEnd\n        if (\n          eventWithState.prevToolCallId !== null &&\n          eventWithState.prevToolCallId !== eventWithState.toolCallId &&\n          shouldEmitToolCalls\n        ) {\n          events.push({\n            type: RuntimeEventTypes.ActionExecutionEnd,\n          });\n        }\n\n        // Message ended: emit TextMessageEnd\n        if (\n          eventWithState.prevMessageId !== null &&\n          eventWithState.prevMessageId !== eventWithState.messageId &&\n          shouldEmitMessages\n        ) {\n          events.push({\n            type: RuntimeEventTypes.TextMessageEnd,\n          });\n        }\n\n        switch (eventWithState.event!.event) {\n          case LangGraphEventTypes.OnCopilotKitStateSync:\n            events.push({\n              type: RuntimeEventTypes.AgentStateMessage,\n              threadId: eventWithState.event.thread_id,\n              role: eventWithState.event.role,\n              agentName: eventWithState.event.agent_name,\n              nodeName: eventWithState.event.node_name,\n              runId: eventWithState.event.run_id,\n              active: eventWithState.event.active,\n              state: JSON.stringify(eventWithState.event.state),\n              running: eventWithState.event.running,\n            });\n            break;\n          case LangGraphEventTypes.OnToolEnd:\n            // TODO-AGENTS: emit ActionExecutionResult when needed\n            // Need a special tool node for that?\n\n            // const result = eventWithState.event.data?.output?.kwargs?.content?.[0];\n            // const toolCallId = eventWithState.event.data?.output?.kwargs?.tool_call_id;\n            // const toolCallName = eventWithState.event.data?.output?.kwargs?.name;\n            // if (result && toolCallId && toolCallName) {\n            //   events.push({\n            //     type: RuntimeEventTypes.ActionExecutionResult,\n            //     actionExecutionId: toolCallId,\n            //     actionName: toolCallName,\n            //     result,\n            //   });\n            // }\n            break;\n          case LangGraphEventTypes.OnChatModelStream:\n            if (\n              eventWithState.toolCallId !== null &&\n              eventWithState.prevToolCallId !== eventWithState.toolCallId\n            ) {\n              if (shouldEmitToolCalls) {\n                events.push({\n                  type: RuntimeEventTypes.ActionExecutionStart,\n                  actionExecutionId: eventWithState.toolCallId,\n                  actionName: eventWithState.toolCallName,\n                  scope: \"client\",\n                });\n              }\n            }\n            // Message started: emit TextMessageStart\n            else if (\n              eventWithState.messageId !== null &&\n              eventWithState.prevMessageId !== eventWithState.messageId\n            ) {\n              if (shouldEmitMessages) {\n                events.push({\n                  type: RuntimeEventTypes.TextMessageStart,\n                  messageId: eventWithState.messageId,\n                });\n              }\n            }\n\n            const args = eventWithState.event.data?.chunk?.kwargs?.tool_call_chunks?.[0]?.args;\n            const content = eventWithState.event.data?.chunk?.kwargs?.content;\n\n            // Tool call args: emit ActionExecutionArgs\n            if (args) {\n              if (shouldEmitToolCalls) {\n                events.push({\n                  type: RuntimeEventTypes.ActionExecutionArgs,\n                  args,\n                });\n              }\n            }\n            // Message content: emit TextMessageContent\n            else if (eventWithState.messageId !== null && content) {\n              if (shouldEmitMessages) {\n                events.push({\n                  type: RuntimeEventTypes.TextMessageContent,\n                  content,\n                });\n              }\n            }\n            break;\n        }\n        return events;\n      }),\n    );\n  }\n}\n","export enum LangGraphEventTypes {\n  OnChainStart = \"on_chain_start\",\n  OnChainStream = \"on_chain_stream\",\n  OnChainEnd = \"on_chain_end\",\n  OnChatModelStart = \"on_chat_model_start\",\n  OnChatModelStream = \"on_chat_model_stream\",\n  OnChatModelEnd = \"on_chat_model_end\",\n  OnToolStart = \"on_tool_start\",\n  OnToolEnd = \"on_tool_end\",\n  OnCopilotKitStateSync = \"on_copilotkit_state_sync\",\n}\n\ntype LangGraphOnCopilotKitStateSyncEvent = {\n  event: LangGraphEventTypes.OnCopilotKitStateSync;\n  thread_id: string;\n  agent_name: string;\n  node_name: string;\n  run_id: string;\n  active: boolean;\n  role: string;\n  state: any;\n  running: boolean;\n};\n\ntype LangGraphOnChainStartEvent = {\n  event: LangGraphEventTypes.OnChainStart;\n  run_id: string;\n  name: string;\n  tags: string[];\n  metadata: { thread_id: string };\n  data: {\n    input: any;\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChainEndEvent = {\n  event: LangGraphEventTypes.OnChainEnd;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n  };\n  data: {\n    input: any;\n    output: any;\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChatModelStartEvent = {\n  event: LangGraphEventTypes.OnChatModelStart;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n    ls_provider: string;\n    ls_model_name: string;\n    ls_model_type: string;\n    ls_temperature: number;\n  };\n  data: {\n    input: {\n      messages: {\n        lc: number;\n        type: string;\n        id: string[];\n        kwargs: {\n          content: string;\n          type: string;\n          id: string;\n        };\n      }[][];\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChatModelStreamEvent = {\n  event: LangGraphEventTypes.OnChatModelStream;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n    ls_provider: string;\n    ls_model_name: string;\n    ls_model_type: string;\n    ls_temperature: number;\n  };\n  data: {\n    chunk: {\n      lc: number;\n      type: string;\n      id: string[];\n      kwargs: {\n        content: string;\n        additional_kwargs: {\n          tool_calls: {\n            index: number;\n            id: string;\n            function: { arguments: string; name: string };\n            type: string;\n          }[];\n        };\n        type: string;\n        id: string;\n        tool_calls: { name: string; args: {}; id: string; type: string }[];\n        tool_call_chunks: {\n          name: string;\n          args: string;\n          id: string;\n          index: number;\n          type: string;\n        }[];\n        invalid_tool_calls: any[];\n      };\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChatModelEndEvent = {\n  event: LangGraphEventTypes.OnChatModelEnd;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n    ls_provider: string;\n    ls_model_name: string;\n    ls_model_type: string;\n    ls_temperature: number;\n  };\n  data: {\n    input: any;\n    output: {\n      generations: {\n        text: string;\n        generation_info: {\n          finish_reason: string;\n          model_name: string;\n          system_fingerprint: string;\n        };\n        type: string;\n        message: {\n          lc: number;\n          type: string;\n          id: string[];\n          kwargs: {\n            content: string;\n            additional_kwargs: {\n              tool_calls: {\n                index: number;\n                id: string;\n                function: { arguments: string; name: string };\n                type: string;\n              }[];\n            };\n            response_metadata: {\n              finish_reason: string;\n              model_name: string;\n              system_fingerprint: string;\n            };\n            type: string;\n            id: string;\n            tool_calls: { name: string; args: { query: string }; id: string; type: string }[];\n            invalid_tool_calls: any[];\n          };\n        };\n      }[][];\n      llm_output: any;\n      run: any;\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnChainStreamEvent = {\n  event: LangGraphEventTypes.OnChainStream;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step?: number;\n    langgraph_node?: string;\n    langgraph_triggers?: string[];\n    langgraph_task_idx?: number;\n    thread_ts?: string;\n  };\n  data: {\n    chunk: {\n      messages: {\n        lc: number;\n        type: string;\n        id: string[];\n        kwargs: {\n          content: string;\n          additional_kwargs?: {\n            tool_calls?: {\n              index: number;\n              id: string;\n              function: { arguments: string; name: string };\n              type: string;\n            }[];\n          };\n          response_metadata?: {\n            finish_reason: string;\n            model_name: string;\n            system_fingerprint: string;\n          };\n          type: string;\n          id: string;\n          tool_calls?: { name: string; args: { query: string }; id: string; type: string }[];\n          invalid_tool_calls?: any[];\n        };\n      }[];\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnToolStartEvent = {\n  event: LangGraphEventTypes.OnToolStart;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n  };\n  data: {\n    input: {\n      query: string;\n    };\n  };\n  parent_ids: string[];\n};\n\ntype LangGraphOnToolEndEvent = {\n  event: LangGraphEventTypes.OnToolEnd;\n  name: string;\n  run_id: string;\n  tags: string[];\n  metadata: {\n    thread_id: string;\n    langgraph_step: number;\n    langgraph_node: string;\n    langgraph_triggers: string[];\n    langgraph_task_idx: number;\n    thread_ts: string;\n  };\n  data: {\n    input: {\n      query: string;\n    };\n    output: {\n      lc: number;\n      type: string;\n      id: string[];\n      kwargs: {\n        content: string[];\n        type: string;\n        name: string;\n        tool_call_id: string;\n        status: string;\n      };\n    };\n  };\n  parent_ids: string[];\n};\n\nexport type LangGraphEvent =\n  | LangGraphOnChainStartEvent\n  | LangGraphOnChainStreamEvent\n  | LangGraphOnChainEndEvent\n  | LangGraphOnChatModelStartEvent\n  | LangGraphOnChatModelStreamEvent\n  | LangGraphOnChatModelEndEvent\n  | LangGraphOnToolStartEvent\n  | LangGraphOnToolEndEvent\n  | LangGraphOnCopilotKitStateSyncEvent;\n","import { Action } from \"@copilotkit/shared\";\nimport { GraphQLContext } from \"../integrations/shared\";\nimport { Logger } from \"pino\";\nimport telemetry from \"../../lib/telemetry-client\";\nimport { Message } from \"../../graphql/types/converted\";\nimport { RuntimeEvent, RuntimeEventSubject } from \"../../service-adapters/events\";\nimport { RemoteLangGraphEventSource } from \"../../agents/langgraph/event-source\";\nimport { Observable } from \"rxjs\";\nimport { ActionInput } from \"../../graphql/inputs/action.input\";\nimport { AgentStateInput } from \"../../graphql/inputs/agent-state.input\";\n\nexport type RemoteActionDefinition = {\n  url: string;\n  onBeforeRequest?: ({ ctx }: { ctx: GraphQLContext }) => {\n    headers?: Record<string, string> | undefined;\n  };\n};\n\nexport type LangGraphAgentHandlerParams = {\n  name: string;\n  actionInputsWithoutAgents: ActionInput[];\n  threadId?: string;\n  nodeName?: string;\n};\n\nexport type LangGraphAgentAction = Action<any> & {\n  langGraphAgentHandler: (params: LangGraphAgentHandlerParams) => Promise<Observable<RuntimeEvent>>;\n};\n\nexport function isLangGraphAgentAction(action: Action<any>): action is LangGraphAgentAction {\n  if (!action) {\n    return false;\n  }\n  return typeof (action as LangGraphAgentAction).langGraphAgentHandler === \"function\";\n}\n\nfunction createHeaders(\n  onBeforeRequest: RemoteActionDefinition[\"onBeforeRequest\"],\n  graphqlContext: GraphQLContext,\n) {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  if (onBeforeRequest) {\n    const { headers: additionalHeaders } = onBeforeRequest({ ctx: graphqlContext });\n    if (additionalHeaders) {\n      Object.assign(headers, additionalHeaders);\n    }\n  }\n\n  return headers;\n}\n\nasync function fetchRemoteInfo({\n  url,\n  onBeforeRequest,\n  graphqlContext,\n  logger,\n}: {\n  url: string;\n  onBeforeRequest?: RemoteActionDefinition[\"onBeforeRequest\"];\n  graphqlContext: GraphQLContext;\n  logger: Logger;\n}): Promise<any[]> {\n  logger.debug({ url }, \"Fetching actions from url\");\n  const headers = createHeaders(onBeforeRequest, graphqlContext);\n\n  const response = await fetch(`${url}/info`, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({ properties: graphqlContext.properties }),\n  });\n\n  if (!response.ok) {\n    logger.error(\n      { url, status: response.status, body: await response.text() },\n      \"Failed to fetch actions from url\",\n    );\n    return [];\n  }\n\n  const json = await response.json();\n  logger.debug({ json }, \"Fetched actions from url\");\n  return json;\n}\n\nfunction constructRemoteActions({\n  json,\n  url,\n  onBeforeRequest,\n  graphqlContext,\n  logger,\n  messages,\n  agentStates,\n}: {\n  json: any[];\n  url: string;\n  onBeforeRequest?: RemoteActionDefinition[\"onBeforeRequest\"];\n  graphqlContext: GraphQLContext;\n  logger: Logger;\n  messages: Message[];\n  agentStates?: AgentStateInput[];\n}): Action<any>[] {\n  const actions = json[\"actions\"].map((action) => ({\n    name: action.name,\n    description: action.description,\n    parameters: action.parameters,\n    handler: async (args: any) => {\n      logger.debug({ actionName: action.name, args }, \"Executing remote action\");\n\n      const headers = createHeaders(onBeforeRequest, graphqlContext);\n      telemetry.capture(\"oss.runtime.remote_action_executed\", {});\n\n      const response = await fetch(`${url}/actions/execute`, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify({\n          name: action.name,\n          arguments: args,\n          properties: graphqlContext.properties,\n        }),\n      });\n\n      if (!response.ok) {\n        logger.error(\n          { url, status: response.status, body: await response.text() },\n          \"Failed to execute remote action\",\n        );\n        return \"Failed to execute remote action\";\n      }\n\n      const requestResult = await response.json();\n\n      const result = requestResult[\"result\"];\n      logger.debug({ actionName: action.name, result }, \"Executed remote action\");\n      return result;\n    },\n  }));\n\n  const agents = json[\"agents\"].map((agent) => ({\n    name: agent.name,\n    description: agent.description,\n    parameters: [],\n    handler: async (_args: any) => {},\n\n    langGraphAgentHandler: async ({\n      name,\n      actionInputsWithoutAgents,\n      threadId,\n      nodeName,\n    }: LangGraphAgentHandlerParams): Promise<Observable<RuntimeEvent>> => {\n      logger.debug({ actionName: agent.name }, \"Executing remote agent\");\n\n      const headers = createHeaders(onBeforeRequest, graphqlContext);\n      telemetry.capture(\"oss.runtime.remote_action_executed\", {});\n\n      let state = {};\n      if (agentStates) {\n        const jsonState = agentStates.find((state) => state.agentName === name)?.state;\n        if (jsonState) {\n          state = JSON.parse(jsonState);\n        }\n      }\n\n      const response = await fetch(`${url}/agents/execute`, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify({\n          name,\n          threadId,\n          nodeName,\n          messages,\n          state,\n          properties: graphqlContext.properties,\n          actions: actionInputsWithoutAgents.map((action) => ({\n            name: action.name,\n            description: action.description,\n            parameters: JSON.parse(action.jsonSchema),\n          })),\n        }),\n      });\n\n      if (!response.ok) {\n        logger.error(\n          { url, status: response.status, body: await response.text() },\n          \"Failed to execute remote agent\",\n        );\n        throw new Error(\"Failed to execute remote agent\");\n      }\n\n      const eventSource = new RemoteLangGraphEventSource();\n      eventSource.streamResponse(response);\n      return eventSource.processLangGraphEvents();\n    },\n  }));\n\n  return [...actions, ...agents];\n}\n\nexport async function setupRemoteActions({\n  remoteActionDefinitions,\n  graphqlContext,\n  messages,\n  agentStates,\n}: {\n  remoteActionDefinitions: RemoteActionDefinition[];\n  graphqlContext: GraphQLContext;\n  messages: Message[];\n  agentStates?: AgentStateInput[];\n}): Promise<Action[]> {\n  const logger = graphqlContext.logger.child({ component: \"remote-actions.fetchRemoteActions\" });\n  logger.debug({ remoteActionDefinitions }, \"Fetching remote actions\");\n\n  // Remove duplicates of remoteActionDefinitions.url\n  const filtered = remoteActionDefinitions.filter(\n    (value, index, self) => index === self.findIndex((t) => t.url === value.url),\n  );\n\n  const result = await Promise.all(\n    filtered.map(async (actionDefinition) => {\n      const json = await fetchRemoteInfo({\n        url: actionDefinition.url,\n        onBeforeRequest: actionDefinition.onBeforeRequest,\n        graphqlContext,\n        logger: logger.child({ component: \"remote-actions.fetchActionsFromUrl\", actionDefinition }),\n      });\n      return constructRemoteActions({\n        json,\n        messages,\n        url: actionDefinition.url,\n        onBeforeRequest: actionDefinition.onBeforeRequest,\n        graphqlContext,\n        logger: logger.child({ component: \"remote-actions.constructActions\", actionDefinition }),\n        agentStates,\n      });\n    }),\n  );\n\n  return result.flat();\n}\n","import createPinoLogger from \"pino\";\nimport pretty from \"pino-pretty\";\n\nexport type LogLevel = \"debug\" | \"info\" | \"warn\" | \"error\";\n\nexport type CopilotRuntimeLogger = ReturnType<typeof createLogger>;\n\nexport function createLogger(options?: { level?: LogLevel; component?: string }) {\n  const { level, component } = options || {};\n  const stream = pretty({ colorize: true });\n\n  const logger = createPinoLogger(\n    {\n      level: process.env.LOG_LEVEL || level || \"error\",\n      redact: {\n        paths: [\"pid\", \"hostname\"],\n        remove: true,\n      },\n    },\n    stream,\n  );\n\n  if (component) {\n    return logger.child({ component });\n  } else {\n    return logger;\n  }\n}\n"],"mappings":"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","names":["createYoga","buildSchemaSync","Arg","Ctx","Mutation","Query","Resolver","ReplaySubject","Subject","finalize","firstValueFrom","shareReplay","skipWhile","take","takeWhile","tap","Field","InputType","Field","InputType","registerEnumType","MessageRole","ActionExecutionScope","CopilotRequestType","name","description","MessageInput","BaseMessage","textMessage","actionExecutionMessage","resultMessage","agentStateMessage","Field","TextMessageInput","nullable","ActionExecutionMessageInput","ResultMessageInput","AgentStateMessageInput","InputType","content","role","String","MessageRole","name","arguments","scope","ActionExecutionScope","actionExecutionId","actionName","result","threadId","agentName","state","running","nodeName","runId","active","Boolean","Field","InputType","Field","InputType","ActionInput","name","description","jsonSchema","Field","String","InputType","FrontendInput","toDeprecate_fullContext","actions","url","Field","String","nullable","ActionInput","InputType","Field","InputType","Field","InputType","GuardrailsRuleInput","allowList","denyList","Field","String","nullable","InputType","GuardrailsInput","inputValidationRules","CloudInput","guardrails","Field","GuardrailsInput","nullable","InputType","Field","InputType","ForwardedParametersInput","model","maxTokens","stop","toolChoice","toolChoiceFunctionName","Field","String","nullable","Number","InputType","Field","InputType","AgentSessionInput","agentName","threadId","nodeName","Field","String","nullable","InputType","Field","InputType","AgentStateInput","agentName","state","Field","String","InputType","GenerateCopilotResponseMetadataInput","requestType","Field","CopilotRequestType","nullable","InputType","GenerateCopilotResponseInput","metadata","threadId","runId","messages","frontend","cloud","forwardedParameters","agentSession","agentState","agentStates","String","MessageInput","FrontendInput","CloudInput","ForwardedParametersInput","AgentSessionInput","AgentStateInput","Field","InterfaceType","ObjectType","Field","ObjectType","createUnionType","registerEnumType","MessageStatusCode","registerEnumType","name","BaseMessageStatus","code","Field","ObjectType","PendingMessageStatus","SuccessMessageStatus","FailedMessageStatus","reason","String","MessageStatusUnion","createUnionType","types","BaseMessageOutput","id","createdAt","status","Field","String","Date","MessageStatusUnion","InterfaceType","resolveType","value","hasOwnProperty","TextMessageOutput","ActionExecutionMessageOutput","ResultMessageOutput","AgentStateMessageOutput","undefined","role","content","MessageRole","ObjectType","implements","name","scope","arguments","ActionExecutionScope","actionExecutionId","actionName","result","threadId","agentName","nodeName","runId","active","state","running","Boolean","CopilotResponse","messages","ResponseStatusUnion","nullable","Repeater","of","concat","map","scan","concatMap","ReplaySubject","firstValueFrom","from","TelemetryClient","packageJson","require","telemetryClient","packageName","name","packageVersion","version","ReplaySubject","scan","mergeMap","LangGraphEventTypes","RemoteLangGraphEventSource","eventStream$","ReplaySubject","streamResponse","response","reader","body","getReader","decoder","TextDecoder","buffer","flushBuffer","currentBuffer","join","trim","length","parts","split","lastPartIsComplete","endsWith","push","pop","map","part","filter","forEach","next","JSON","parse","done","value","read","decode","stream","complete","processLangGraphEvents","pipe","scan","acc","event","LangGraphEventTypes","OnChatModelStream","data","chunk","kwargs","tool_call_chunks","prevToolCallId","toolCallId","id","name","toolCallName","prevMessageId","messageId","mergeMap","eventWithState","events","shouldEmitMessages","shouldEmitToolCalls","tags","includes","type","RuntimeEventTypes","ActionExecutionEnd","TextMessageEnd","OnCopilotKitStateSync","AgentStateMessage","threadId","thread_id","role","agentName","agent_name","nodeName","node_name","runId","run_id","active","state","stringify","running","OnToolEnd","ActionExecutionStart","actionExecutionId","actionName","scope","TextMessageStart","args","content","ActionExecutionArgs","TextMessageContent","isLangGraphAgentAction","action","langGraphAgentHandler","createHeaders","onBeforeRequest","graphqlContext","headers","additionalHeaders","ctx","Object","assign","fetchRemoteInfo","url","logger","debug","response","fetch","method","body","JSON","stringify","properties","ok","error","status","text","json","constructRemoteActions","messages","agentStates","actions","map","name","description","parameters","handler","args","actionName","telemetry","capture","arguments","requestResult","result","agents","agent","_args","actionInputsWithoutAgents","threadId","nodeName","state","jsonState","find","agentName","parse","jsonSchema","Error","eventSource","RemoteLangGraphEventSource","streamResponse","processLangGraphEvents","setupRemoteActions","remoteActionDefinitions","child","component","filtered","filter","value","index","self","findIndex","t","Promise","all","actionDefinition","flat","RuntimeEventTypes","RuntimeEventSubject","ReplaySubject","constructor","sendTextMessageStart","messageId","next","type","sendTextMessageContent","content","sendTextMessageEnd","sendTextMessage","sendActionExecutionStart","actionExecutionId","actionName","sendActionExecutionArgs","args","sendActionExecutionEnd","sendActionExecution","toolName","sendActionExecutionResult","result","sendAgentStateMessage","threadId","agentName","nodeName","runId","active","role","state","running","RuntimeEventSource","eventStream$","callback","stream","processRuntimeEvents","serverSideActions","guardrailsResult$","actionInputsWithoutAgents","catch","error","console","pipe","map","event","scope","find","action","name","scan","acc","callActionServerSide","concatMap","eventWithState","toolCallEventStream$","executeAction","telemetry","capture","concat","of","actionArguments","status","firstValueFrom","complete","JSON","parse","isLangGraphAgentAction","langGraphAgentHandler","from","subscribe","err","handler","streamLangChainResponse","actionExecution","id","GraphQLJSONObject","plainToInstance","GraphQLError","randomId","invokeGuardrails","baseUrl","copilotCloudPublicApiKey","data","onResult","onError","messages","length","textMessage","role","MessageRole","user","filter","m","undefined","assistant","map","content","lastMessage","restOfMessages","slice","body","input","validTopics","cloud","guardrails","inputValidationRules","allowList","invalidTopics","denyList","guardrailsResult","fetch","method","headers","JSON","stringify","ok","resultJson","json","CopilotResolver","hello","generateCopilotResponse","ctx","properties","telemetry","capture","requestType","metadata","logger","child","component","debug","copilotRuntime","_copilotkit","runtime","serviceAdapter","copilotCloudBaseUrl","key","request","get","error","GraphQLError","process","env","COPILOT_CLOUD_BASE_URL","responseStatus$","ReplaySubject","interruptStreaming$","guardrailsResult$","outputMessages","resolveOutputMessagesPromise","rejectOutputMessagesPromise","outputMessagesPromise","Promise","resolve","reject","eventSource","threadId","randomId","runId","serverSideActions","actionInputsWithoutAgents","processRuntimeRequest","actions","frontend","publicApiKey","graphqlContext","forwardedParameters","agentSession","agentStates","url","response","status","firstValueFrom","Repeater","pushMessage","stopStreamingMessages","result","next","GuardrailsValidationFailureResponse","guardrailsReason","reason","plainToInstance","TextMessage","id","createdAt","Date","err","UnknownErrorResponse","description","eventStreamSubscription","eventStream","processRuntimeEvents","action","find","serverSideAction","name","pipe","shareReplay","finalize","subscribe","event","type","RuntimeEventTypes","TextMessageStart","textMessageContentStream","skipWhile","e","takeWhile","TextMessageEnd","streamingTextStatus","Subject","messageId","pushTextChunk","stopStreamingText","textChunks","textSubscription","take","tap","FailedMessageStatus","MessageStreamInterruptedResponse","unsubscribe","TextMessageContent","push","complete","SuccessMessageStatus","join","ActionExecutionStart","actionExecutionArgumentStream","ActionExecutionEnd","streamingArgumentsStatus","actionExecutionId","actionName","scope","arguments","pushArgumentsChunk","stopStreamingArguments","argumentChunks","actionExecutionArgumentSubscription","ActionExecutionArgs","args","ActionExecutionMessage","ActionExecutionResult","ResultMessage","AgentStateMessage","agentName","nodeName","active","state","running","SuccessResponseStatus","Query","String","Mutation","CopilotResponse","Ctx","Arg","GraphQLJSONObject","nullable","Resolver","useDeferStream","createPinoLogger","pretty","createLogger","options","level","component","stream","pretty","colorize","logger","createPinoLogger","process","env","LOG_LEVEL","redact","paths","remove","child","logger","createLogger","createContext","initialContext","copilotKitContext","contextLogger","properties","debug","ctx","_copilotkit","buildSchema","options","schema","buildSchemaSync","resolvers","CopilotResolver","emitSchemaFile","getCommonConfig","logLevel","process","env","LOG_LEVEL","level","component","cloud","telemetry","setCloudConfiguration","publicApiKey","baseUrl","setGlobalProperties","runtime","serviceAdapter","constructor","name","logging","plugins","useDeferStream","context","copilotRuntimeNodeHttpEndpoint","options","commonConfig","getCommonConfig","telemetry","setGlobalProperties","runtime","framework","properties","_copilotkit","capture","logger","logging","debug","yoga","createYoga","graphqlEndpoint","endpoint"]}