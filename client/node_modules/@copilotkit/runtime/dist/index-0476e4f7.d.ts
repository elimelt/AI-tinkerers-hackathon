import { BaseMessage } from './graphql/types/base/index.js';

declare enum MessageRole {
    user = "user",
    assistant = "assistant",
    system = "system"
}
declare enum ActionExecutionScope {
    server = "server",
    client = "client",
    passThrough = "passThrough"
}

declare class MessageInput extends BaseMessage {
    textMessage?: TextMessageInput;
    actionExecutionMessage?: ActionExecutionMessageInput;
    resultMessage?: ResultMessageInput;
    agentStateMessage?: AgentStateMessageInput;
}
declare class TextMessageInput {
    content: string;
    role: MessageRole;
}
declare class ActionExecutionMessageInput {
    name: string;
    arguments: string;
    scope: ActionExecutionScope;
}
declare class ResultMessageInput {
    actionExecutionId: string;
    actionName: string;
    result: string;
}
declare class AgentStateMessageInput {
    threadId: string;
    agentName: string;
    role: MessageRole;
    state: string;
    running: boolean;
    nodeName: string;
    runId: string;
    active: boolean;
}

declare class TextMessage extends BaseMessage implements TextMessageInput {
    content: string;
    role: MessageRole;
}
type Message = BaseMessage;
declare class ActionExecutionMessage extends BaseMessage implements Omit<ActionExecutionMessageInput, "arguments"> {
    name: string;
    arguments: Record<string, any>;
    scope: ActionExecutionScope;
}
declare class ResultMessage extends BaseMessage implements ResultMessageInput {
    actionExecutionId: string;
    actionName: string;
    result: string;
}
declare class AgentStateMessage extends BaseMessage implements Omit<AgentStateMessageInput, "state"> {
    threadId: string;
    agentName: string;
    nodeName: string;
    runId: string;
    active: boolean;
    role: MessageRole;
    state: any;
    running: boolean;
}

export { ActionExecutionMessage as A, MessageInput as M, ResultMessage as R, TextMessage as T, Message as a, AgentStateMessage as b };
