{"ast":null,"code":"var _jsxFileName = \"/Users/emm12/repos/healthinsights_hackathon/client/src/EventSelection.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport './EventSelection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventSelection = () => {\n  _s();\n  const [data, setData] = useState(null); // Proper type for API data\n  const [selectedType, setSelectedType] = useState(null); // Type for selected type\n  const [visibleEvents, setVisibleEvents] = useState(null); // Type for visible events\n  const [loading, setLoading] = useState(true);\n  const [types, setTypes] = useState(null); // Type for event types\n\n  // Fetch event data from the API\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/interesting-events\");\n        const data = await response.json();\n        setData(data);\n        setTypes(Object.keys(data)); // Extract keys as event types\n        setSelectedType(Object.keys(data)[0]); // Automatically select the first type\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Update visible events when selectedType or data changes\n  useEffect(() => {\n    if (!loading && data && selectedType) {\n      setVisibleEvents(data[selectedType]);\n    }\n  }, [selectedType, data, loading]);\n  const allLoaded = !loading && data && types && selectedType;\n  if (!allLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  const handleRemoveEvent = (rangeIdx, eventId) => {\n    if (!visibleEvents || !selectedType || !data) return;\n    const updatedEvents = visibleEvents.map((range, idx) => {\n      if (idx === rangeIdx) {\n        return {\n          ...range,\n          events: range.events.filter(event => event.id !== eventId)\n        };\n      }\n      return range;\n    });\n    setVisibleEvents(updatedEvents);\n    setData({\n      ...data,\n      [selectedType]: updatedEvents\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event-selection-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: types.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `event-button ${selectedType === type ? 'selected' : ''}`,\n        onClick: () => setSelectedType(type),\n        children: type\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), visibleEvents && visibleEvents.map((range, rangeIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-range\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-range-header\",\n        children: [\"Range: \", new Date(range.range[0]).toLocaleString(), \" - \", new Date(range.range[1]).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"event-list\",\n        children: range.events.length > 0 ? range.events.map(event => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"event-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: event.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }, this), \": \", event.description, \" at \", new Date(event.timestamp).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-event-button\",\n            onClick: () => handleRemoveEvent(rangeIdx, event.id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 19\n          }, this)]\n        }, event.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"no-events\",\n          children: \"No events\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, rangeIdx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(EventSelection, \"kDlO9PTHJH6eCSwamS8kEXJesgQ=\");\n_c = EventSelection;\nexport default EventSelection;\nvar _c;\n$RefreshReg$(_c, \"EventSelection\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","EventSelection","_s","data","setData","selectedType","setSelectedType","visibleEvents","setVisibleEvents","loading","setLoading","types","setTypes","fetchData","response","fetch","json","Object","keys","error","console","allLoaded","children","fileName","_jsxFileName","lineNumber","columnNumber","handleRemoveEvent","rangeIdx","eventId","updatedEvents","map","range","idx","events","filter","event","id","className","type","onClick","Date","toLocaleString","length","description","timestamp","_c","$RefreshReg$"],"sources":["/Users/emm12/repos/healthinsights_hackathon/client/src/EventSelection.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport './EventSelection.css';\n\ntype EventType = {\n  id: number;\n  type: string;\n  description: string;\n  timestamp: string;\n  data?: any;\n};\n\ntype EventRange = {\n  range: [string, string];\n  events: EventType[];\n};\n\ntype EventData = {\n  [key: string]: EventRange[];\n};\n\nconst EventSelection = () => {\n  const [data, setData] = useState<EventData | null>(null); // Proper type for API data\n  const [selectedType, setSelectedType] = useState<string | null>(null); // Type for selected type\n  const [visibleEvents, setVisibleEvents] = useState<EventRange[] | null>(null); // Type for visible events\n  const [loading, setLoading] = useState(true);\n  const [types, setTypes] = useState<string[] | null>(null); // Type for event types\n\n  // Fetch event data from the API\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/interesting-events\");\n        const data: EventData = await response.json();\n        setData(data);\n        setTypes(Object.keys(data)); // Extract keys as event types\n        setSelectedType(Object.keys(data)[0]); // Automatically select the first type\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Update visible events when selectedType or data changes\n  useEffect(() => {\n    if (!loading && data && selectedType) {\n      setVisibleEvents(data[selectedType]);\n    }\n  }, [selectedType, data, loading]);\n\n  const allLoaded = !loading && data && types && selectedType;\n\n  if (!allLoaded) {\n    return <div>Loading...</div>;\n  }\n\n  const handleRemoveEvent = (rangeIdx: number, eventId: number) => {\n    if (!visibleEvents || !selectedType || !data) return;\n\n    const updatedEvents = visibleEvents.map((range, idx) => {\n      if (idx === rangeIdx) {\n        return {\n          ...range,\n          events: range.events.filter(event => event.id !== eventId),\n        };\n      }\n      return range;\n    });\n\n    setVisibleEvents(updatedEvents);\n    setData({ ...data, [selectedType]: updatedEvents });\n  };\n\n  return (\n    <div className=\"event-selection-container\">\n      {/* Event type switcher */}\n      <div className=\"button-group\">\n        {types.map(type => (\n          <button\n            key={type}\n            className={`event-button ${selectedType === type ? 'selected' : ''}`}\n            onClick={() => setSelectedType(type)}\n          >\n            {type}\n          </button>\n        ))}\n      </div>\n\n      {/* Event ranges and events */}\n      {visibleEvents && visibleEvents.map((range, rangeIdx) => (\n        <div key={rangeIdx} className=\"event-range\">\n          <div className=\"event-range-header\">\n            Range: {new Date(range.range[0]).toLocaleString()} - {new Date(range.range[1]).toLocaleString()}\n          </div>\n          <ul className=\"event-list\">\n            {range.events.length > 0 ? (\n              range.events.map(event => (\n                <li key={event.id} className=\"event-item\">\n                  <div className=\"event-details\">\n                    <strong>{event.type}</strong>: {event.description} at {new Date(event.timestamp).toLocaleString()}\n                  </div>\n                  <button\n                    className=\"remove-event-button\"\n                    onClick={() => handleRemoveEvent(rangeIdx, event.id)}\n                  >\n                    X\n                  </button>\n                </li>\n              ))\n            ) : (\n              <li className=\"no-events\">No events</li>\n            )}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default EventSelection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}